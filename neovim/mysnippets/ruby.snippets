snippet    attr
abbr        attr_reader
options     head
  attr_reader :${0:TARGET}
# # snippet bye
# # require 'byebug'; byebug
# # endsnippet

# # snippet "(\S+)\.each" "<elements>.each do |<element>| <block> end" r
# # `!p snip.rv=match.group(1)`.each { |${1:e}| $0 }
# # endsnippet

# # snippet "(\S+)\.red" "<array>.reduce(n) do |memo, var| <block> end" r
# # `!p snip.rv=match.group(1)`.reduce(${2:init}) do |${3:memo}, ${4:var}|
# # 	$0
# # end
# # endsnippet

# # snippet "(\S+)\.mapi" "<array>.map.with_index do |index, var| <block> end" r
# # `!p snip.rv=match.group(1)`.map.with_index do |index, ${2:var}|
# # 	$0
# # end
# # endsnippet

# # snippet "(\S+)\.map" "<array>.map do |var| <block> end" r
# # `!p snip.rv=match.group(1)`.map do | ${2:var}|
# # 	$0
# # end
# # endsnippet

# # ##########################
# # #     Minitest snippets     #
# # ##########################
snippet clast
abbr class test < Minitest::Test
options head
	class ${1:`substitute(expand('%:t:r:r:r'), '\v%(^(.)|_(.))', '\u\1\u\2', 'g')`} < Minitest::Test
		${0:TARGET}
	end

snippet     deft
abbr        def test
options     head
  def test_${1:TEST_CASE}
    ${0:TARGET}
  end

# # ##########################
# # #     Rspec snippets     #
# # ##########################
snippet bef
abbr before {}
options head
	before { ${0:TARGET} }

snippet befd
abbr before do..end
options head
	before do
		${0:TARGET}
	end

snippet sav
abbr save_and_open_page
options head
  save_and_open_page

snippet get
abbr get ''
options head
	get '${1:path}'

snippet feat
abbr feature
options head
	feature '${1:feature}' do
		${0:TARGET}
	end

snippet scen
abbr scenario
options head
	scenario '${1:scenario}' do
		${0:TARGET}
	end

snippet bye
abbr byebug
options head
  require 'byebug'; byebug

# snippet "(\S+)\.each" "<elements>.each do |<element>| <block> end" r
# `!p snip.rv=match.group(1)`.each { |${1:e}| $0 }
# endsnippet

# snippet "(\S+)\.red" "<array>.reduce(n) do |memo, var| <block> end" r
# `!p snip.rv=match.group(1)`.reduce(${2:init}) do |${3:memo}, ${4:var}|
# 	$0
# end
# endsnippet

# snippet "(\S+)\.mapi" "<array>.map.with_index do |index, var| <block> end" r
# `!p snip.rv=match.group(1)`.map.with_index do |index, ${2:var}|
# 	$0
# end
# endsnippet

# snippet "(\S+)\.map" "<array>.map do |var| <block> end" r
# `!p snip.rv=match.group(1)`.map do | ${2:var}|
# 	$0
# end
# endsnippet

